@charset "UTF-8"; // Fixes an issue where Ruby locale is not set properly
// See https://github.com/sass-mq/sass-mq/pull/10

/// Based on 16:9 screen resolutions
///
/// @link https://pacoup.com/2011/06/12/list-of-true-169-resolutions/
$mq-base: 896px;
$mq-increment: 128px;

$mq-xxxxs: $mq-base - ($mq-increment * 5);
$mq-xxxs: $mq-base - ($mq-increment * 4);
$mq-xxs: $mq-base - ($mq-increment * 3);
$mq-xs: $mq-base - ($mq-increment * 2);
$mq-s: $mq-base - $mq-increment;
$mq-m: $mq-base;
$mq-l: $mq-base + $mq-increment;
$mq-xl: $mq-base + ($mq-increment * 2);
$mq-xxl: $mq-base + ($mq-increment * 3);
$mq-xxxl: $mq-base + ($mq-increment * 4);
$mq-xxxxl: $mq-base + ($mq-increment * 5);
$mq-xxxxxl: $mq-base + ($mq-increment * 6);
$mq-xxxxxxl: $mq-base + ($mq-increment * 7);
$mq-xxxxxxxl: $mq-base + ($mq-increment * 8);

/// Breakpoint list
///
/// Name your breakpoints in a way that creates a ubiquitous language
/// across team members. It will improve communication between
/// stakeholders, designers, developers, and testers.
///
/// @type Map
/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples
$mq-breakpoints: (
	xxxxs: $mq-xxxxs,
	xxxs: $mq-xxxs,
	xxs: $mq-xxs,
	xs: $mq-xs,
	s: $mq-s,
	m: $mq-m,
	l: $mq-l,
	xl: $mq-xl,
	xxl: $mq-xxl,
	xxxl: $mq-xxxl,
	xxxxl: $mq-xxxxl,
	xxxxxl: $mq-xxxxxl,
	xxxxxxl: $mq-xxxxxxl,
	xxxxxxxl: $mq-xxxxxxxl,
) !default;

/// Customize the media type (e.g. `@media screen` or `@media print`)
/// By default sass-mq uses an "all" media type (`@media all and …`)
///
/// @type String
/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and examples
$mq-media-type: all !default;

/// Get a breakpoint's width
///
/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints
///
/// @example scss
///  $tablet-width: mq-get-breakpoint-width(tablet);
///  @media (min-width: mq-get-breakpoint-width(desktop)) {}
///
/// @requires {Variable} $mq-breakpoints
///
/// @returns {Number} Value in pixels
@function mq-get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {
	@if map-has-key($breakpoints, $name) {
		@return map-get($breakpoints, $name);
	} @else {
		@warn "Breakpoint #{$name} wasn't found in $breakpoints.";
	}
}

/// Media Query mixin
///
/// @param {String | Boolean} $from (false) - One of $mq-breakpoints
/// @param {String | Boolean} $until (false) - One of $mq-breakpoints
/// @param {String | Boolean} $and (false) - Additional media query parameters
/// @param {String} $media-type ($mq-media-type) - Media type: screen, print…
///
/// @ignore Undocumented API, for advanced use only:
/// @ignore @param {Map} $breakpoints ($mq-breakpoints)
/// @ignore @param {String} $static-breakpoint ($mq-static-breakpoint)
///
/// @content styling rules, wrapped into a @media query when $responsive is true
///
/// @requires {Variable} $mq-media-type
/// @requires {Variable} $mq-breakpoints
/// @requires {Variable} $mq-static-breakpoint
/// @requires {function} mq-px2em
/// @requires {function} mq-get-breakpoint-width
///
/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples
///
/// @example scss
///  .element {
///    @include mq($from: mobile) {
///      color: red;
///    }
///    @include mq($until: tablet) {
///      color: blue;
///    }
///    @include mq(mobile, tablet) {
///      color: green;
///    }
///    @include mq($from: tablet, $and: '(orientation: landscape)') {
///      color: teal;
///    }
///    @include mq(950px) {
///      color: hotpink;
///    }
///    @include mq(tablet, $media-type: screen) {
///      color: hotpink;
///    }
///    // Advanced use:
///    $my-breakpoints: (L: 900px, XL: 1200px);
///    @include mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {
///      color: hotpink;
///    }
///  }
@mixin mq(
	$from: false,
	$until: false,
	$and: false,
	$media-type: $mq-media-type,
	$breakpoints: $mq-breakpoints
) {
	$min-width: 0;
	$max-width: 0;
	$media-query: '';

	// From: this breakpoint (inclusive)
	@if $from {
		@if type-of($from) == number {
			$min-width: $from;
		} @else {
			$min-width: mq-get-breakpoint-width($from, $breakpoints);
		}
	}

	// Until: that breakpoint (exclusive)
	@if $until {
		@if type-of($until) == number {
			$max-width: $until;
		} @else {
			$max-width: mq-get-breakpoint-width($until, $breakpoints);
		}
	}

	@if $min-width != 0 {
		$media-query: '#{$media-query} and (min-width: #{$min-width})';
	}
	@if $max-width != 0 {
		$media-query: '#{$media-query} and (max-width: #{$max-width})';
	}
	@if $and {
		$media-query: '#{$media-query} and #{$and}';
	}

	// Remove unnecessary media query prefix 'all and '
	@if ($media-type == 'all' and $media-query != '') {
		$media-type: '';
		$media-query: str-slice(unquote($media-query), 6);
	}

	@media #{$media-type + $media-query} {
		@content;
	}
}
